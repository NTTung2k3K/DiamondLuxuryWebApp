@model DiamondLuxurySolution.ViewModel.Models.News.NewsVm

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Chỉnh sửa tin tức</h1>
@if (ViewBag.Errors != null)
{
    foreach (var error in ViewBag.Errors)
    {
        <h6 class="text-danger">@error</h6>
    }
}
@if (Model != null)
{
    <div class="row">
        <div class="col-md-8">

            <form asp-action="Edit" asp-controller="News" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group m-2">
                    <label asp-for="NewsId" class="control-label  m-2">ID của Tin Tức</label>
                    <input asp-for="NewsId" class="form-control" readonly />
                </div>
              
                <input type="hidden" name="WriterId" value="@Model.Writer.StaffId"/>
                <div class="form-group m-2">
                    <label asp-for="Writer.FullName" class="control-label  m-2">Người viết</label>
                    <input asp-for="Writer.FullName" class="form-control" readonly />
                </div>
                <div class="form-group m-2">
                    <label asp-for="NewName" class="control-label m-2">Tên Tin Tức</label>
                    <input asp-for="NewName" class="form-control" />
                    <span asp-validation-for="NewName" class="text-danger"></span>
                </div>
                <div class="form-group m-2">
                    <label asp-for="Title" class="control-label  m-2">Chủ Đề</label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group m-2">
                    <label class="control-label m-2">Hình đại diện hiện tại</label>
                    @if (string.IsNullOrEmpty(Model.Image) || Model.Image.Length <= 0)
                    {
                        <label style="color:orangered;">Không có hình ảnh</label>
                    }
                    else
                    {
                        <label>
                            <img src="@Model.Image" style="height:100px; width:100px" />
                        </label>
                    }
                </div>
                <div class="form-group m-2">
                    <label asp-for="Image" class="control-label m-2">Hình đại diện Mới</label>
                    <input asp-for="Image" class="form-control" type="file" />
                </div>
                <div class="form-check form-switch m-4">
                    <label asp-for="Status" class="control-label mt-1">Hiển thị</label>
                    <input class="form-check-input f-18" type="checkbox" asp-for="Status">
                </div>
                <div class="form-group m-2">
                    <label asp-for="DateModified" class="control-label m-2">Ngày chỉnh sửa gần nhất</label>
                    <input asp-for="DateModified" class="form-control"  readonly />
                    <span asp-validation-for="DateModified" class="text-danger"></span>
                </div>
                <div style="max-width: 960px;">
                    <div class="form-group m-2 text-center" style="width:970px;">
                        <h4 asp-for="Description" class="control-label m-4 text-center">Nội dung</h4>
                        <textarea asp-for="Description" id="editor"></textarea>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-9 mt-2">
                        <input type="submit" value="Lưu" class="btn btn-primary" />
                    </div>
                    <div class="col-md-3 mt-2">
                        <a class="m-6 btn btn-secondary" asp-action="Index" asp-controller="News">Về trang quản lí tin tức</a>
                    </div>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <a class="m-6 btn btn-secondary" asp-action="Index" asp-controller="News">Về trang quản lí tin tức</a>
}
<hr />

@section Scripts {
    <script src="~/assets/js/plugins/ckeditor/classic/ckeditor.js"></script>
    <script src="~/assets/js/plugins/ckeditor/vi.js"></script>




    <script>
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', "/Post/Upload", true);
                xhr.responseType = 'json';
            }
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your backend here!
                return new MyUploadAdapter(loader);
            };
        }


        ClassicEditor
            .create(document.querySelector('#editor'), {
                // Toolbar của bạn (nếu bạn muốn)
                // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
                extraPlugins: [MyCustomUploadAdapterPlugin],

            })
            .then(editor => {
                // Thiết lập chiều cao tối thiểu là 500px bằng cách thêm CSS
                editor.editing.view.change(writer => {
                    writer.setStyle('min-height', '500px', editor.editing.view.document.getRoot());
                });
                window.editor = editor;
            })
            .catch(err => {
                console.error(err.stack);
            });
    </script>
}
